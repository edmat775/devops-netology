Домашнее задание к занятию "5.3. Введение. Экосистема. Архитектура. Жизненный цикл Docker контейнера"
Задача 1

Сценарий выполнения задачи:

    создайте свой репозиторий на https://hub.docker.com;
    выберете любой образ, который содержит веб-сервер Nginx;
    создайте свой fork образа;
    реализуйте функциональность: запуск веб-сервера в фоне с индекс-страницей, содержащей HTML-код ниже:

<html>
<head>
Hey, Netology
</head>
<body>
<h1>I’m DevOps Engineer!</h1>
</body>
</html>

Опубликуйте созданный форк в своем репозитории и предоставьте ответ в виде ссылки на https://hub.docker.com/username_repo.

vagrant@server1:~$ docker ps
CONTAINER ID   IMAGE                   COMMAND                  CREATED              STATUS              PORTS     NAMES
405af51b25c7   edmat775/devops-nginx   "/docker-entrypoint.…"   About a minute ago   Up About a minute   80/tcp    flamboyant_einstein
vagrant@server1:~$ curl 172.17.0.2
<!DOCTYPE html>
<html>
    <head>
        Hey, Netology
    </head>
    <body>
        <h1>Im DevOps Engineer!</h1>
    </body>
</html>

https://hub.docker.com/repository/docker/edmat775/devops-nginx


Задача 2
Посмотрите на сценарий ниже и ответьте на вопрос: "Подходит ли в этом сценарии использование Docker контейнеров или лучше подойдет виртуальная машина, физическая машина? Может быть возможны разные варианты?"

Детально опишите и обоснуйте свой выбор.

Сценарий:

Высоконагруженное монолитное java веб-приложение;
Физический сервер или VM предпочтительнее, т.к. монолитное и на микросервисы сложно разбить. К тому же высоконагруженное - 
необходим прямой доступ к ресурсам.
Nodejs веб-приложение;
Подойдет Docker, так как это веб-платформа с подключаемыми внешними библиотеками
Мобильное приложение c версиями для Android и iOS;
Необходим GUI, так что подойдет виртуалка.
Шина данных на базе Apache Kafka;
Если среда рабочая и полнота данных критична, то лучше использовать VM; если среда тестовая и потеря данных некритична,
можно использовать Docker.
Elasticsearch кластер для реализации логирования продуктивного веб-приложения - три ноды elasticsearch, два logstash и две ноды kibana;
Elasticsearvh лучше на VM, отказоустойчивость решается на уровне кластера, kibana и logstash можно вынести в Docker.
Мониторинг-стек на базе Prometheus и Grafana;
Подойдет Docker, так как данные не хранятся, и масштабировать легко.
MongoDB, как основное хранилище данных для java-приложения;
Зависит от нагрузки на DB. Если нагрузка большая, то физический сервер, если нет – VM.
Gitlab сервер для реализации CI/CD процессов и приватный (закрытый) Docker Registry.
Подойдет VM для DB и фалового хранилища, Docker для сервисов
